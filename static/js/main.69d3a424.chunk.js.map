{"version":3,"sources":["images/To do list-bro.png","component/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Listitems","props","listItem","items","map","item","className","key","id","icon","onClick","processItem","doneItem","type","defaultValue","text","onChange","e","updateItem","target","value","deleteItem","duration","easing","delay","library","add","faTrash","faCheckCircle","faSpinner","App","state","currentItem","handleInput","bind","addItem","document","getElementById","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","forEach","spinner","check","style","display","window","confirm","todo","progres","done","onSubmit","src","logo","alt","width","placeholder","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69d3a424.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/To do list-bro.0b0a66ea.png\";","import React from \"react\";\r\nimport \"./ListItems.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nexport default function Listitems(props) {\r\n  const items = props.items;\r\n\r\n  const listItem = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p\r\n        //  defaultValue={item.text}\r\n        // id={item.key}\r\n        // className=\"itemText\"\r\n        // onChange={(e) => {\r\n        //   props.updateItem(e.target.value, item.key);\r\n        // }}\r\n        >\r\n          <span className={`spinner${item.key}`} id={`spinner${item.key}`}>\r\n            <FontAwesomeIcon\r\n              className=\"spinner\"\r\n              id=\"spinner\"\r\n              icon=\"spinner\"\r\n              onClick={() => props.processItem(item.key)}\r\n            />\r\n          </span>\r\n          <span className={`check${item.key}`} id={`check${item.key}`}>\r\n            <FontAwesomeIcon\r\n              className=\"checkCircle\"\r\n              id=\"checkCircle\"\r\n              icon=\"check-circle\"\r\n              onClick={() => props.doneItem(item.key)}\r\n            />\r\n          </span>\r\n          {/* {item.text} */}\r\n          <input\r\n            type=\"text\"\r\n            defaultValue={item.text}\r\n            id=\"itemText\"\r\n            className=\"itemText\"\r\n            onChange={(e) => {\r\n              props.updateItem(e.target.value, item.key);\r\n            }}\r\n          />\r\n          <span className=\"icon3\" id=\"icon3\">\r\n            <FontAwesomeIcon\r\n              className=\"trash\"\r\n              icon=\"trash\"\r\n              onClick={() => props.deleteItem(item.key)}\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"content\">\r\n      <FlipMove duration={400} easing=\"ease-in-out\" delay={0}>\r\n        {listItem}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n","// add items to to-do-list\n// edit, delete,animate the item in the list\n\nimport React, { Component } from \"react\";\nimport \"./App.scss\";\nimport \"./component/ListItems.scss\";\nimport ListItems from \"./component/ListItems.js\";\nimport logo from \"./images/To do list-bro.png\";\n\n//FONTAWESOME\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faTrash,\n  faCheckCircle,\n  faSpinner,\n} from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faTrash, faCheckCircle, faSpinner);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.updateItem = this.updateItem.bind(this);\n    this.doneItem = this.doneItem.bind(this);\n    this.processItem = this.processItem.bind(this);\n  }\n\n  handleInput() {\n    const value = document.getElementById(\"value\").value;\n    this.setState({\n      currentItem: {\n        text: value,\n        key: Date.now(),\n      },\n    });\n  }\n\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  }\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({\n      items: filteredItems,\n    });\n  }\n\n  updateItem(text, key) {\n    const items = this.state.items;\n    items.forEach((item) => {\n      if (item.key === key) {\n        items.text = text;\n      }\n    });\n\n    this.setState({\n      items: items,\n    });\n  }\n\n  processItem(key) {\n    //SPINNER\n    const spinner = document.getElementById(`spinner${key}`);\n    const check = document.getElementById(`check${key}`);\n\n    spinner.style.display = \"none\";\n    check.style.display = \"inline\";\n    // alert(\"BEING DOING\");\n    window.confirm(\"COMPLETED\");\n  }\n\n  doneItem(key) {\n    //CHECK CIRCLE\n    const spinner = document.getElementById(`spinner${key}`);\n    const check = document.getElementById(`check${key}`);\n    spinner.style.display = \"inline\";\n    check.style.display = \"none\";\n    this.setState({\n      todo: { progres: false, done: true },\n    });\n    window.confirm(\"BEING DOING\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <img src={logo} alt=\"logo\" width=\"100\" />\n            <h2 className=\"title\">\n              to<span className=\"titleDo\">Do</span>\n            </h2>\n\n            <input\n              id=\"value\"\n              type=\"text\"\n              placeholder=\"Enter To Do . . .\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\">Tambah</button>\n          </form>\n        </header>\n        <ListItems\n          items={this.state.items}\n          deleteItem={this.deleteItem}\n          updateItem={this.updateItem}\n          doneItem={this.doneItem}\n          processItem={this.processItem}\n        ></ListItems>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}